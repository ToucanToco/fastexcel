name: CI

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

env:
  MIN_PYTHON_VERSION: "3.8"


defaults:
  run:
    # Prevents windows runners from running on powershell
    shell: bash

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "${{ env.MIN_PYTHON_VERSION }}"
    - name: Set up rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true
    - name: Set up rustfmt
      run: rustup component add rustfmt

    # Maturin requires a venv to be activated, that's why we have to create one here
    - name: Create virtualenv
      run: |
        python -m venv .venv
        source .venv/bin/activate
        make install-test-requirements

    - name: Lint
      run: |
        source .venv/bin/activate
        make lint

  # GitHub provides only x86_64 runners, so we cannot test on arm architecture
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
        os: ["ubuntu-latest", "macos-latest", "windows-latest"]
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Set up rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true

    # Maturin requires a venv to be activated, that's why we have to create one here
    - name: Create virtualenv
      env:
        BIN: ${{ matrix.os == 'windows-latest' && 'Scripts' || 'bin' }}
      run: |
        python -m venv .venv
        echo "${{ github.workspace }}/.venv/${{ env.BIN }}" >> $GITHUB_PATH

    - name: Install dependencies
      run: |
        echo "PATH IS $PATH"
        make install-test-requirements

    - name: Test
      run: make test-ci

  check-wheel-build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
        os: ["ubuntu-latest", "macos-latest", "windows-latest"]
        architecture: [x86-64, aarch64]
        exclude:
          - os: windows-latest
            architecture: aarch64
    steps:
    - uses: actions/checkout@v4
    - name: Set Rust target for aarch64
      if: matrix.architecture == 'aarch64'
      id: target
      run: |
        TARGET=${{ matrix.os == 'macos-latest' && 'aarch64-apple-darwin' || 'aarch64-unknown-linux-gnu'}}
        echo "target=$TARGET" >> $GITHUB_OUTPUT

    - name: build (fast)
      uses: messense/maturin-action@v1
      with:
        manylinux: auto
        command: build
        args: "-o dist --interpreter python${{ matrix.python-version }}"
        target: ${{ steps.target.outputs.target }}
